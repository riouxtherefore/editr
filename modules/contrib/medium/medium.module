<?php

/**
 * @file
 * Provides a WYSIWYG editor like Medium.com.
 */

/**
 * Implements hook_wysiwyg_include_directory().
 */
function medium_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'editors':
      return $type;
  }
}

/**
 * Implements hook_menu().
 */
function medium_menu() {
  $items['medium/image/%file'] = array(
    'title' => 'Medium imagedata endpoint',
    'page callback' => 'medium_imagedata',
    'page arguments' => array(2),
    'access callback' => 'file_entity_access',
    'access arguments' => array('view', 2),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/medium'] = array(
    'title' => 'Medium editor',
    'description' => 'Configure settings related to the Medium editor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('medium_admin_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Menu callback/form builder for admin/config/content/medium.
 */
function medium_admin_form($form, &$form_state) {
  $form = array();

  // @TODO: Allow users to choose the image style used for media embeds.
  // @TODO: Allow users to choose which media plugins should be exposed.

  $form['whatever'] = array(
    '#markup' => 'Placeholder'
  );

  return $form;
}

/**
 * Implements hook_libraries_info().
 */
function medium_libraries_info() {
  // Main medium editor library.
  $libraries['mediumeditor'] = array(
    'name' => 'Medium Editor',
    'vendor url' => 'https://github.com/daviferreira/medium-editor',
    'download url' => 'https://github.com/daviferreira/medium-editor/releases',
    'version callback' => 'medium_get_package_version',
    'files' => array(
      'js' => array(
        'dist/js/medium-editor.min.js'
      ),
      'css' => array(
        'dist/css/medium-editor.min.css',
        'dist/css/themes/bootstrap.min.css'
      ),
    ),
  );

  // Medium Editor insert library (For media support)
  $libraries['medium-editor-insert-plugin'] = array(
    'name' => 'Medium Editor Insert Plugin',
    'vendor url' => 'https://github.com/orthes/medium-editor-insert-plugin',
    'download url' => 'https://github.com/orthes/medium-editor-insert-plugin/releases',
    'version callback' => 'medium_get_package_version',
    'files' => array(
      'css' => array(
        'dist/css/medium-editor-insert-plugin.min.css'
      ),
      'js' => array(
        'dist/js/addons/medium-editor-insert-plugin.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Detect editor version.
 *
 * @editor array
 *   An array containing editor properties as returned from hook_editor().
 *
 * @return string
 *   The installed editor version.
 */
function medium_get_package_version($editor) {
  $file = DRUPAL_ROOT . '/' . $editor['library path'] . '/package.json';
  $package_info = json_decode(file_get_contents($file));
  return $package_info->version;
}

/**
 * Menu callback for medium/image/%file.
 *
 * Returns a relative URL to an admin-configured image style for a given file.
 */
function medium_imagedata($file) {
  $image_style = variable_get('medium_insert_image_style', 'thumbnail');
  $uri = $file->uri;
  $derivative_uri = image_style_path($image_style, $uri);
  $new_image_url  = file_create_url($derivative_uri);

  if (file_exists($derivative_uri) || image_style_create_derivative($image_style, $uri, $derivative_uri)) {
    $url_parts = parse_url($new_image_url);
    drupal_json_output(array('path' => $url_parts['path']));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function medium_wysiwyg_editor_settings_alter(&$settings, $context) {
  $using_medium_editor = (bool)($context['editor']['name'] == 'medium');
  $media_button_enabled = isset($context['profile']->settings['buttons']['default']['media']) &&
    $context['profile']->settings['buttons']['default']['media'] === 1;

  if ($using_medium_editor && $media_button_enabled) {
    libraries_load('medium-editor-insert-plugin');
    drupal_add_js(drupal_get_path('module', 'medium') . '/medium-media.js');

    module_load_include('inc', 'media', 'includes/media.browser');

    $javascript = media_browser_js();
    $javascript['js'][] = array(
      'data' => array(
        'medium' => array(
          'media_support' => TRUE,
          'types' => array(
            'image' => 'image',
          ),
          'enabledPlugins' => array(
            'upload' => 'upload',
            'media_default--media_browser_1' => 'media_default--media_browser_1',
            'media_default--media_browser_my_files' => 'media_default--media_browser_my_files'
          ),
          'schemes' => array('public' => 'public'),
          'file_directory' => '',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '',
          'uri_scheme' => 'public',
        ),
      ),
      'type' => 'setting',
    );

  }
  else {
    // Even if we don't have Media support, the frontend still needs to know.
    $javascript = array(
      'js' => array(
        'data' => array(
          'medium' => array(
            'media_support' => TRUE,
          ),
        ),
        'type' => 'setting',
      )
    );
  }

  foreach ($javascript as $key => $definitions) {
    foreach ($definitions as $definition) {
      $function = 'drupal_add_' . $key;
      // Since the arguments to pass are variable, use call_user_func_array().
      // This will not handle all potential drupal_add_*() functions directly
      // but covers the js and library needed here, which are unlikely to be
      // expanded since this function is only a workaround for a wysiwyg limitation.
      call_user_func_array($function, $definition);
    }
  }
}
